kube-prometheus-stack:
  enabled: true
  fullnameOverride: "kube-prometheus-stack"
  global:
    rbac:
      create: true
  grafana:
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
            isDefault: false
            editable: false
    plugins:
      - grafana-singlestat-panel
    sidecar:
      alerts:
        enabled: true
      datasources:
        enabled: true
      notifiers:
        enabled: true

metrics-server:
  enabled: true
  fullnameOverride: "metrics-server"
  apiService:
    annotations:
      somekey: "this-avoids-argocd-wanting-to-always-apply-null-annotations"

alloy:
  alloy:
    enabled: true
    configMap:
      content: |-
        // Write your Alloy config here:
        logging {
          level = "info"
          format = "logfmt"
        }

        loki.write "default" {
          endpoint {
            url = "http://loki-gateway/loki/api/v1/push"
          }
        }

        // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
        // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
        discovery.kubernetes "pod" {
          role = "pod"
          // Restrict to pods on the node to reduce cpu & memory usage
          selectors {
            role = "pod"
            field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
          }
        }

        // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
        // If no rules are defined, then the input targets are exported as-is.
        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          // Label creation - "namespace" field from "__meta_kubernetes_namespace"
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          // Label creation - "pod" field from "__meta_kubernetes_pod_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          // Label creation - "__path__" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        // loki.process receives log entries from other Loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "pod_logs" {
          forward_to = [loki.write.default.receiver]
        }


        // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
        // into log lines to forward to other Loki components.
        loki.source.kubernetes_events "cluster_events" {
          job_name   = "integrations/kubernetes/eventhandler"
          log_format = "json"
          forward_to = [
            loki.process.cluster_events.receiver,
          ]
        }

        // loki.process receives log entries from other loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "cluster_events" {
          forward_to = [loki.write.default.receiver]

          stage.json {
            expressions = {
              "events_resource_kind" = "kind",
              "events_resource_name" = "name",
            }
          }
          stage.labels {
            values = {
              "events_namespace" = "namespace",
              "events_resource_kind" = "events_resource_kind",
              "events_resource_name" = "events_resource_name",
            }
          }
        }

loki:
  enabled: false
  fullnameOverride: "loki"
  loki:
    persistence:
      enabled: false
    storage:
      bucketNames:
        chunks: loki
        ruler: loki-ruler
        admin: loki-admin
      use_thanos_objstore: true
      object_store:
        type: s3
        s3:
          endpoint: loki-minio:9000
          insecure: true
          access_key_id: loki
          secret_access_key: vanfUEWu8mEbDze
        storage_prefix: loki
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    limits_config:
      retention_period: 336h           # global retention of 2 weeks (14 days)
      max_query_lookback: 336h         # generally should be â‰¤ retention_period
      allow_structured_metadata: true
      volume_enabled: true
    compactor:
      working_directory: /var/loki/compactor
      retention_enabled: true
      compaction_interval: 10m
      retention_delete_delay: 2h       # delay before actual deletion
      retention_delete_worker_count: 100
      delete_request_store: s3
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    pattern_ingester:
        enabled: true
    ruler:
      enable_api: true

  minio:
    enabled: true
    fullnameOverride: "loki-minio"
    rootUser: loki
    rootPassword: vanfUEWu8mEbDze
    buckets:
      - name: loki
      - name: loki-ruler
      - name: loki-admin
    service:
      port: 9000
    persistence:
      enabled: true

  deploymentMode: SingleBinary

  singleBinary:
    replicas: 1

  # Zero out replica counts of other deployment modes
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0
